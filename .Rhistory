}
if(box){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
boxplot(data[i], xlab=names(data[i]))
}
par(mfrow=c(1,1))
}
if(qq){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
qqnorm(as.numeric(unlist(data[i])), main=paste("Q-Q Plot for",names(data[i]), sep=" "))
qqline(as.numeric(unlist(data[i])), col="red")
}
par(mfrow=c(1,1))
}
if(hist){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
data=as.data.frame(data)
h = hist(data[,i], col="red",xlab= names(data[i]), main=paste("Histogram of",names(data[i]), sep=" "))
xfit<-seq(min(data[,i]),max(data[,i]),length=40)
yfit<-dnorm(xfit,mean=mean(data[,i]),sd=sd(data[,i]))
yfit <- yfit*diff(h$mids[1:2])*length(data[,i])
lines(xfit, yfit, col="blue", lwd=2)
}
par(mfrow=c(1,1))
}
#if(dens){
#  for (i in 1:length(data)){
#    data=as.data.frame(data)
#    d <- density(data[,i])
#    plot(d, xlab= names(data[i]), main=paste("Histogram of",names(data[i]), sep=" "))
#    polygon(d, col="red")
#  }}
return(res)
warning("Shapiro-Wilk test is applied to each variable in the data and 0.05 used as a significance level")
}
uniPlot(setosa)
c(iris[1:50, 1:3] ,iris[1:50, 1:3] )
rbind(iris[1:50, 1:3] ,iris[1:50, 1:3] )
cbind(iris[1:50, 1:3] ,iris[1:50, 1:3] )
setosa = rbind(iris[1:50, 1:4], iris[1:50, 1:4])
dim(setosa)
setosa = cbind(iris[1:50, 1:4], iris[1:50, 1:4])
dim(setosa)
uniPlot = function(data, test =TRUE, matrix=TRUE, box = TRUE, qq=TRUE, hist=TRUE){
res = as.data.frame(matrix(NA,length(data),4))
colnames(res)=c("Variable", "Statistic", "p-value", "Result")
if(test){
data = as.list(as.data.frame((data)))
univ = lapply(data, shapiro.test)
for (i in 1:length(data)){
res[i,1] = names(data)[i]
res[i,2] = round(univ[[i]]$statistic,3)
res[i,3] = round(univ[[i]]$p.value,3)
res[i,4] = if(univ[[i]]$p.value > 0.05) {"Normal"} else {"Not-normal"}
}
}
if(matrix){
data=as.data.frame(data)
plot(data)
}
if(box){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
boxplot(data[i], xlab=names(data[i]))
}
par(mfrow=c(1,1))
}
if(qq){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
qqnorm(as.numeric(unlist(data[i])), main=paste("Q-Q Plot for",names(data[i]), sep=" "))
qqline(as.numeric(unlist(data[i])), col="red")
}
par(mfrow=c(1,1))
}
if(hist){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
data=as.data.frame(data)
h = hist(data[,i], col="red",xlab= names(data[i]), main=paste("Histogram of",names(data[i]), sep=" "))
xfit<-seq(min(data[,i]),max(data[,i]),length=40)
yfit<-dnorm(xfit,mean=mean(data[,i]),sd=sd(data[,i]))
yfit <- yfit*diff(h$mids[1:2])*length(data[,i])
lines(xfit, yfit, col="blue", lwd=2)
}
par(mfrow=c(1,1))
}
#if(dens){
#  for (i in 1:length(data)){
#    data=as.data.frame(data)
#    d <- density(data[,i])
#    plot(d, xlab= names(data[i]), main=paste("Histogram of",names(data[i]), sep=" "))
#    polygon(d, col="red")
#  }}
return(res)
warning("Shapiro-Wilk test is applied to each variable in the data and 0.05 used as a significance level")
}
uniPlot(setosa)
data=setosa
round((length(data)/2)+0.5)
for (i in 1:length(data)){
qqnorm(as.numeric(unlist(data[i])), main=paste("Q-Q Plot for",names(data[i]), sep=" "))
qqline(as.numeric(unlist(data[i])), col="red")
}
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
qqnorm(as.numeric(unlist(data[i])), main=paste("Q-Q Plot for",names(data[i]), sep=" "))
qqline(as.numeric(unlist(data[i])), col="red")
}
setosa = iris[1:50, 1:3] # Iris data only for setosa and four variables
#setosa = cbind(iris[1:50, 1:4], iris[1:50, 1:4])
uniPlot = function(data, test =TRUE, matrix=TRUE, box = TRUE, qq=TRUE, hist=TRUE){
res = as.data.frame(matrix(NA,length(data),4))
colnames(res)=c("Variable", "Statistic", "p-value", "Result")
if(test){
data = as.list(as.data.frame((data)))
univ = lapply(data, shapiro.test)
for (i in 1:length(data)){
res[i,1] = names(data)[i]
res[i,2] = round(univ[[i]]$statistic,3)
res[i,3] = round(univ[[i]]$p.value,3)
res[i,4] = if(univ[[i]]$p.value > 0.05) {"Normal"} else {"Not-normal"}
}
}
if(matrix){
data=as.data.frame(data)
plot(data)
}
if(box){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
boxplot(data[i], xlab=names(data[i]))
}
par(mfrow=c(1,1))
}
if(qq){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
qqnorm(as.numeric(unlist(data[i])), main=paste("Q-Q Plot for",names(data[i]), sep=" "))
qqline(as.numeric(unlist(data[i])), col="red")
}
par(mfrow=c(1,1))
}
if(hist){
par(mfrow=c(round((length(data)/2)+0.5),round((length(data)/2)+0.5)))
for (i in 1:length(data)){
data=as.data.frame(data)
h = hist(data[,i], col="red",xlab= names(data[i]), main=paste("Histogram of",names(data[i]), sep=" "))
xfit<-seq(min(data[,i]),max(data[,i]),length=40)
yfit<-dnorm(xfit,mean=mean(data[,i]),sd=sd(data[,i]))
yfit <- yfit*diff(h$mids[1:2])*length(data[,i])
lines(xfit, yfit, col="blue", lwd=2)
}
par(mfrow=c(1,1))
}
#if(dens){
#  for (i in 1:length(data)){
#    data=as.data.frame(data)
#    d <- density(data[,i])
#    plot(d, xlab= names(data[i]), main=paste("Histogram of",names(data[i]), sep=" "))
#    polygon(d, col="red")
#  }}
return(res)
warning("Shapiro-Wilk test is applied to each variable in the data and 0.05 used as a significance level")
}
uniPlot(setosa)
library(MVN)
?MVN
setosa = iris[1:50, 1:4] # Iris data only for setosa and four variables
result = hzTest(setosa, qqplot = TRUE)
result
setosa = iris[1:50, 1:4] # Iris data only for setosa and four variables
result = mardiaTest(setosa, qqplot = TRUE)
result
setosa = iris[1:50, 1:4] # Iris data only for setosa and four variables
result = roystonTest(setosa, qqplot = TRUE)
result
setosa = iris[1:50, 1:4] # Iris data only for setosa and four variables
uniPlot(setosa, type="qqplot")
setosa = iris[1:50, 1:4] # Iris data only for setosa and four variables
uniNorm(setosa, type="SW")
citation("MASS")
vignette("MVN")
citation("psych")
citation("FactoMineR")
library(MVN)
setosa = iris[1:50, 1:3] #
result = mvOutlier(setosa, qqplot=TRUE, method = "quan") #
result = mvOutlier(setosa, qqplot=TRUE, method = "adj.quan") #
?hz
result = mvOutlier(setosa, qqplot=TRUE, method = "adj.quan") #
result = mvOutlier(setosa, qqplot=TRUE, method = "quan") #
result = mvOutlier(setosa, qqplot=TRUE, method = "adj.quan") #
result = mvOutlier(setosa, qqplot=TRUE, method = "quan") #
result = mvOutlier(setosa, qqplot=TRUE, method = "adj.quan") #
setosa=iris[1:50,1:3]
result = mvOutlier(setosa, qqplot=TRUE, method = "quan")
library("MVN")
result = mvOutlier(setosa, qqplot=TRUE, method = "quan")
result = mvOutlier(setosa, qqplot=TRUE, method = "adj.quan")
setosa=iris[51:100,1:3]
result = mvOutlier(setosa, qqplot=TRUE, method = "quan")
result = mvOutlier(setosa, qqplot=TRUE, method = "adj.quan")
setosa=iris[101:150,1:3]
result = mvOutlier(setosa, qqplot=TRUE, method = "quan")
result = mvOutlier(setosa, qqplot=TRUE, method = "adj.quan")
iris
library(MVN)
data=iris[1:50,1:3]
hzTest(data, qqplot=F)
roystonTest(data, qqplot=F)
mardiaTest(data, qqplot=F)
install.packages("GMDH")
install.packages("~/Downloads/GMDH_1.0.tar", repos = NULL)
library(MLSeq)
library(caret)
library(bioassayR)
extdata_dir <- system.file("extdata", package="bioassayR")
assayDescriptionFile <- file.path(extdata_dir, "exampleAssay.xml")
activityScoresFile <- file.path(extdata_dir, "exampleScores.csv")
myDatabaseFilename <- tempfile()
mydb <- newBioassayDB(myDatabaseFilename, indexed=F)
addDataSource(mydb, description="PubChem Bioassay", version="1.0")
myAssay <- parsePubChemBioassay("362", activityScoresFile, assayDescriptionFile)
myAssay
loadBioassay(mydb, myAssay)
addBioassayIndex(mydb)
queryBioassayDB(mydb, "SELECT * FROM activity LIMIT 10")
disconnectBioassayDB(mydb)
myAssay <- parsePubChemBioassay("362")
myAssay
myAssay <- parsePubChemBioassay("362", "/Users/selcukorkmaz/Desktop/bioassayR/exampleAssay.xml", "/Users/selcukorkmaz/Desktop/bioassayR/exampleScores.csv")
myAssay <- parsePubChemBioassay("362", "/Users/selcukorkmaz/Desktop/bioassayR/exampleAssay.xml", "/Users/selcukorkmaz/Desktop/bioassayR/exampleScores.csv")
myAssay <- parsePubChemBioassay("362", "/Users/selcukorkmaz/Desktop/bioassayR/AID_362_description.xml", "/Users/selcukorkmaz/Desktop/bioassayR/AID_362_data.csv")
myAssay <- parsePubChemBioassay("362", "/Users/selcukorkmaz/Desktop/bioassayR/AID_362_description.xml", "/Users/selcukorkmaz/Desktop/bioassayR/AID_362_data.csv")
myAssay <- parsePubChemBioassay("362", "/Users/selcukorkmaz/Desktop/bioassayR/AID_362_description.xml", "/Users/selcukorkmaz/Desktop/bioassayR/AID_362_data.csv")
assayDescriptionFile <- "/Users/selcukorkmaz/Desktop/bioassayR/AID_362_description.xml"
activityScoresFile <- "/Users/selcukorkmaz/Desktop/bioassayR/AID_362_data.csv"
myDatabaseFilename <- tempfile()
mydb <- newBioassayDB(myDatabaseFilename, indexed=F)
addDataSource(mydb, description="PubChem Bioassay", version="1.0")
myAssay <- parsePubChemBioassay("362",assayDescriptionFile , activityScoresFile )
assayDescriptionFile
activityScoresFile
myAssay <- parsePubChemBioassay("362", assayDescriptionFile, activityScoresFile )
myAssay <- parsePubChemBioassay("362", assayDescriptionFile, activityScoresFile )
myAssay
rm(list=ls())
library(bioassayR)
library(RCurl)
library(kulife)
library(ChemmineR)
rm(list=ls())
library(bioassayR)
library(RCurl)
library(ChemmineR)
setwd("/Users/selcukorkmaz/Desktop/bioassayR/")
###############################################
##### PRIMARY DATA FROM PUBCHEM ##########
###############################################
aid_prim = "687"
activityScoresFile = getURL(paste("https://pubchem.ncbi.nlm.nih.gov/assay/assay.cgi?aid=",aid_prim,"&q=expdata_csvsave", sep=""))
tmp_score = read.csv(textConnection(activityScoresFile))
write.csv(tmp_score, file = paste("/Users/selcukorkmaz/Desktop/bioassayR/activityScoresFile_",aid_prim,".csv", sep=""), quote=F, row.names=F)
activityScoresFile <- file.path("/Users/selcukorkmaz/Desktop/bioassayR", paste("activityScoresFile_",aid_prim,".csv", sep=""))
download.file(paste("https://pubchem.ncbi.nlm.nih.gov/assay/assay.cgi?aid=", aid_prim,"&q=expdesc_xmldisplay", sep=""),
paste("/Users/selcukorkmaz/Desktop/bioassayR/assayDescriptionFile_",aid_prim,".xml", sep=""), method = "curl")
assayDescriptionFile <- file.path("/Users/selcukorkmaz/Desktop/bioassayR", paste("assayDescriptionFile_",aid_prim,".xml", sep=""))
myDatabaseFilename <- tempfile()
mydb_prim <- newBioassayDB(myDatabaseFilename, indexed=F)
addDataSource(mydb_prim, description="PubChem Bioassay", version="unknown")
myAssay_prim <- parsePubChemBioassay(aid_prim, csvFile=activityScoresFile, xmlFile=assayDescriptionFile )
myAssay_prim
loadBioassay(mydb_prim, myAssay_prim)
addBioassayIndex(mydb_prim)
primary=queryBioassayDB(mydb_prim, "SELECT * FROM activity")
primary_comp = primary[complete.cases(primary),]
cids = as.numeric(primary_comp$cid)
options("scipen"=100, "digits"=4)
pubchemCompoundMirror <- "pubchemCompoundMirror"
outputFile <- "working/compounds.sdf"
setwd("/Users/selcukorkmaz/")
cids = as.numeric(primary_comp$cid)
options("scipen"=100, "digits"=4)
pubchemCompoundMirror <- "pubchemCompoundMirror"
outputFile <- "working/compounds.sdf"
# get paths of all SDF files in PubChem
sdfs <- list.files(pubchemCompoundMirror, full.names = TRUE)
sdfs <- sdfs[grep(".sdf.gz$", sdfs)]
# add compounds to output file one file at a time
for (i in sdfs) {
lowerLimit <- as.numeric(gsub("^.*Compound_(\\d+)_(\\d+).sdf.gz", "\\1", i))
higherLimit <- as.numeric(gsub("^.*Compound_(\\d+)_(\\d+).sdf.gz", "\\2", i))
cidSubset <- cids[cids <= higherLimit]
cidSubset <- cidSubset[cidSubset >= lowerLimit]
if(length(cidSubset) == 0) next
mySdf <- read.SDFset(i)
if(length(mySdf) == 0) next
mySdf <- mySdf[sdfid(mySdf) %in% cidSubset]
if(length(mySdf) == 0) next
# append 'mySdf' to 'outputFile'
fileConn<-file(outputFile, open="a")
for(i in seq(along=mySdf)){
sdf <- sdf2str(mySdf[[i]])
sdf <- paste(sdf, collapse="\n")
writeLines(sdf, fileConn)
}
close(fileConn)
}
library(MVN)
?hz
citation("MVN")
library(MVN)
library(MASS)
?mvrnorm
Sigma <- matrix(c(10,3,3,2),2,2)
data=mvrnorm(n=100, rep(0, 2), Sigma)
uniNorm(data)
uniNorm(data)
rm(list=ls())
library(MVN)
library(MASS)
Sigma <- matrix(c(10,3,3,2),2,2)
data=mvrnorm(n=100, rep(0, 2), Sigma)
uniNorm(data)
data=data
dim(data)
head(data)
uniNorm(data)
uniPlot(data)
uniPlot(data, type="hist")
uniPlot(iris[-5], type="hist")
head(data)
uniPlot(data, type="hist")
if (type == "AD") TestName = "Anderson-Darling"
if (type == "CVM") TestName = "Cramer-von Mises"
type = c("SW", "CVM", "Lillie", "SF", "AD")
if (!is.data.frame(data) && !is.matrix(data) && !is.numeric(data)) stop(warning('Input must be one of classes \"vector\", \"data frame\" or \"matrix\"'))
type = match.arg(type)
if (type == "AD") TestName = "Anderson-Darling"
if (type == "CVM") TestName = "Cramer-von Mises"
if (type == "Lillie") TestName = "Lilliefors (Kolmogorov-Smirnov)"
if (type == "SW") TestName = "Shapiro-Wilk"
if (type == "SF") TestName = "Shapiro-Francia"
if (is.data.frame(data) || is.matrix(data)){
varNames = colnames(data)
dims = dim(data)
if (is.matrix(data)){
data = data.frame(data)
}
if (dims[2] > 2){
if (nrow(data) < 2) stop(warning("Too few number of observations (n < 2)."))
if (is.null(varNames)) varNames = paste("Column",1:ncol(data),sep="")
result = data.frame(matrix(NA, nrow = ncol(data), ncol=4))
colnames(result) = c("Variable", "Statistic", "p-value", "Normality")
result[,"Variable"] = varNames
if (type == "AD") res = apply(data, 2, ad.test)
if (type == "CVM") res = apply(data, 2, cvm.test)
if (type == "Lillie") res = apply(data, 2, lillie.test)
if (type == "SW") res = apply(data, 2, shapiro.test)
if (type == "SF") res = apply(data, 2, sf.test)
result[, 2:3] = round(ldply(res, .fun = function(x)cbind(x$stat, x$p.value))[,-1],4)
result$Normality = ifelse(result[,3] > 0.05, "YES", "NO")
}
}
if (!is.matrix(data) && !is.data.frame(data) && is.numeric(data)){
if (type == "AD") res = ad.test(data)
if (type == "CVM") res = cvm.test(data)
if (type == "Lillie") res = lillie.test(data)
if (type == "SW") res = shapiro.test(data)
if (type == "SF") res = sf.test(data)
result = res
}
{
if(is.numeric(data)) return(result)
else {
cat("\n","  ", TestName, "'s test of Normality", sep="", "\n\n")
return(result)
}
}
}
res = shapiro.test(data)
?shapiro.test
setosa = iris[1:50, 1:4] # Iris data only for setosa and four variables
uniNorm(setosa, type="SW")
head(setosa)
setosa2=as.matrix(Setosa)
setosa2=as.matrix(setosa)
head(setosa2)
class(setosa2)
uniNorm(setosa2, type="SW")
head(data)
uniNorm(data[1:50], type="SW")
uniNorm(data[1:50,], type="SW")
library(MVN)
?hz
library(survaliance)
library(surveillance)
?create.disProg
setwd("/Volumes/SELCUK/MLViS/")
library(shiny)
runApp(launch.browser = T)
install.packages("MVN")
library(pRoc)
library(pROC)
?power.roc.test
power.roc.test
getS3method("power.roc.test", "default")
getS3method("power.roc.test", "roc")
library(MVN)
?mvOutlier
setosa = iris[1:50, 1:3] # Iris data only for setosa and three variables
result = mvOutlier(setosa, qqplot = TRUE, method = "quan")
result
?hzTest
setosa = iris[1:50, 1:4] # Iris data only for setosa and four variables
result = hzTest(setosa, qqplot = TRUE)
result
t = (59.8-53.5)/(sqrt(((26.42)^2/10))+(18.34^2)/10)
t
a=(26.42)^2/10
a
b=(18.34^2)/10
b
c=a+b
(59.8-53.5)/sqrt(c)
?t.test
x=c(23,92,46,55,63,94,77,38,84,26); y=c(32,29,64,55,36,49,77,83,48,62)
x
y
t.test(x,y)
library(rJava)
?rJava
??rJava
install.packages("tm")
library(tm)
setwd("~/Desktop/shiny/")
library(shiny)
runApp()
install.packages("wordcloud")
runApp()
runApp()
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="output")
perl
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="output")
getwd()
setwd("~/Downloads/ClustVis-master/")
runApp()
install.packages("rCharts")
setwd("/Users/selcukorkmaz/Dropbox/gsd/Studies/Web-Tools\(Devel\)/suRvival\(devel\)")
setwd("/Users/selcukorkmaz/Dropbox/gsd/Studies/Web-Tools(Devel)/suRvival(devel)")
runApp()
?shiny
install.packages("shiny")
install.packages("shiny")
library(shiny)
?shiny
setwd("/Users/selcukorkmaz/Dropbox/gsd/Studies/Web-Tools(Devel)/suRvival(devel)")
runApp()
run options(shiny.deprecation.messages=FALSE)
options(shiny.deprecation.messages=FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp("output")
runApp("intput")
runApp("output")
runApp("output")
runApp()
runApp()
library(survival)
?survival
??survival
leukemia.surv <- survfit(Surv(time, status) ~ x, data = aml)
plot(leukemia.surv, lty = 2:3)
legend(100, .9, c("Maintenance", "No Maintenance"), lty = 2:3)
title("Kaplan-Meier Curves\nfor AML Maintenance Study")
lsurv2 <- survfit(Surv(time, status) ~ x, aml, type='fleming')
plot(lsurv2, lty=2:3, fun="cumhaz",
xlab="Months", ylab="Cumulative Hazard")
plot(leukemia.surv, lty = 2:3)
plot(leukemia.surv, lty = 2:3)
plot.survfit
?renderLineChart
renderLineChart
runApp()
setwd("~/Downloads/shiny-js-examples-master 2/output/deneme/")
runApp()
runApp()
runApp()
setwd("/Users/selcukorkmaz/Dropbox/gsd/Studies/Web-Tools(Devel)/suRvival(devel)")
runApp()
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="input")
setwd(/Users/selcukorkmaz/Dropbox/gsd/Studies/Web-Tools(Devel)/survival/)
setwd("/Users/selcukorkmaz/Dropbox/gsd/Studies/Web-Tools(Devel)/survival/")
runApp()
runApp()
install.packages("~/Downloads/shiny_0.10.1.tar.gz", repos = NULL, type = "source")
runApp()
remove.packages("shiny")
install.packages("~/Downloads/shiny_0.10.1.tar.gz", repos = NULL, type = "source")
runApp()
setwd("/Users/selcukorkmaz/Dropbox/gsd/Studies/Web-Tools(Devel)/easyROC(devel)//")
runApp()
remove.packages("shiny", lib = ‘/Library/Frameworks/R.framework/Versions/3.1/Resources/library’)
remove.packages("shiny", lib = ‘/Library/Frameworks/R.framework/Versions/3.1/Resources/library"")
remove.packages("shiny", lib = "/Library/Frameworks/R.framework/Versions/3.1/Resources/library"")
